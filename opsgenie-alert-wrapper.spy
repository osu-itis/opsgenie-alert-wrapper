from shellpython.helpers import Dir
from shellpython import config as shellpyconfig
from opsgenie_sdk import AlertApi
from opsgenie_sdk import Configuration
from opsgenie_sdk import CreateAlertPayload
from opsgenie_sdk.models.team_recipient import TeamRecipient
from opsgenie_sdk.rest import ApiException
import opsgenie_sdk
import yaml
import json
import os
import sys
import hashlib
import pprint

pp = pprint.PrettyPrinter(indent=2)

# create AlertApi object
configuration = opsgenie_sdk.Configuration()
api_instance = opsgenie_sdk.AlertApi(opsgenie_sdk.ApiClient(configuration))

# initialize script config
with open("wrapper_config.yml", "r") as config_file:
    wrapper_config = yaml.load(config_file)

alert_message = wrapper_config["alert_message"]
alert_source = wrapper_config["alert_source"]
alert_description = wrapper_config["alert_description"]
target_script_home = wrapper_config["target_script_home"]
target_run_command = wrapper_config["target_run_command"]
alertfile_dir = wrapper_config["alertfile_dir"]

# disable shellpy colorization
shellpyconfig.COLORAMA_ENABLED = False

# initialize secure credentials
OPSGENIE_API_KEY = os.getenv('OPSGENIE_API_KEY')

# configure opsgenie api client
configuration.api_key['Authorization'] = OPSGENIE_API_KEY
configuration.api_key_prefix['Authorization'] = 'GenieKey'


def main():
    with Dir(target_script_home):
        print "cd'ing into: {}".format(target_script_home)
        print "running cmd: {}".format(target_run_command)
        try:
            result = `{target_run_command}`
        except NonZeroReturnCodeError as e:
            handle_failure(e)
            sys.exit(1)

        print "return code:", result.returncode
        alertfile = get_alertfile_name()
        if os.path.isfile(alertfile):
            print "stale alertfile {} found, deleting it...".format(alertfile)
            os.remove(alertfile)


def get_alertfile_name():
    hash_object = hashlib.md5(alert_source.encode())
    return os.path.join(alertfile_dir, "{}.alert".format(hash_object.hexdigest()))


def handle_failure(result_error):
    print result_error

    alertfile = get_alertfile_name()
    if os.path.isfile(alertfile):
        # alertfile already exists, no action is required
        print "alertfile {} already exists".format(alertfile)
    else:
        # alertfile not found, create a new alert in opsgenie
        print "creating opsgenie alert..."
        alert = create_opsgenie_alert(result_error)

        print "writing alertfile {}...".format(alertfile)
        with open(alertfile, 'w') as af:
            json.dump(alert, af)


def get_request_status(request_id):
    try:
        response = AlertApi().get_request_status(request_id=request_id)
        print('data.alert_id: {}'.format(response.data.alert_id))
        print('data.is_success: {}'.format(response.data.is_success))
    except ApiException as err:
        if err.status == 404:
            return False
        print('Exception when calling AlertApi->get_request_status: {}\n'.format(err))
        sys.exit(1)


def create_opsgenie_alert(result_error):
    # create responders list
    responders = []
    for team in wrapper_config["alert_teams"]:
        alert_team = {}
        alert_team["name"] = team["name"]
        alert_team["type"] = team["type"]
        responders.append(alert_team)

    body = CreateAlertPayload(
        message=alert_message,
        description="{}\n{}".format(alert_description, result_error),
        source=alert_source,
        responders=responders
        )

    print body

    # create request for a new alert
    request_id = ''
    try:
        response = AlertApi().create_alert(create_alert_payload=body)
        request_id = response.request_id
        print('request id: {}'.format(response.request_id))
        print('took: {}'.format(response.took))
        print('result: {}'.format(response.result))
    except ApiException as err:
        print('Exception when calling AlertApi->create_alert: {}\n'.format(err))
        sys.exit(1)

    # query request status until an alert is created
    alert_id = ''
    while alert_id == '':
        try:
            response = AlertApi().get_request_status(request_id=request_id)
            alert_id = response.data.alert_id
        except ApiException as err:
            if err.status == 404:
                continue
            print('Exception when calling AlertApi->get_request_status: {}\n'.format(err))
            sys.exit(1)

    # get alert details
    try:
        response = AlertApi().get_alert(identifier=alert_id, identifier_type='id')
    except ApiException as err:
        print('Exception when calling AlertApi->get_alert: {}\n'.format(err))
        sys.exit(1)

    return {
        'alert_id': response.data.id,
        'message': response.data.message,
        'status': response.data.status,
        'created_at': response.data.created_at.strftime('%Y-%m-%d %H:%M:%S %z'),
        'source': response.data.source,
        'description': response.data.description
    }


if __name__ == "__main__":
    main()
