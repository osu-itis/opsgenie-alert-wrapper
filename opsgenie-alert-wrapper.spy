from opsgenie.swagger_client import AlertApi
from opsgenie.swagger_client import configuration
from opsgenie.swagger_client.models import CreateAlertRequest, TeamRecipient
from opsgenie.swagger_client.rest import ApiException
from shellpython.helpers import Dir
from shellpython import config as shellpyconfig
import json
import os
import sys
import hashlib
import pprint
pp = pprint.PrettyPrinter(indent=2)

# initialize environment variables
OPSGENIE_API_KEY = os.getenv('OPSGENIE_API_KEY')
ALERT_MESSAGE = os.getenv('ALERT_MESSAGE', 'default')
ALERT_SOURCE = os.getenv('ALERT_SOURCE', 'default')
ALERT_DESCRIPTION = os.getenv('ALERT_DESCRIPTION', 'default')
ALERT_TEAMS = os.getenv('ALERT_TEAMS', 'default').split(',')
TARGET_SCRIPT_HOME = os.getenv('TARGET_SCRIPT_HOME', os.getenv('HOME'))
TARGET_RUN_COMMAND = os.getenv('TARGET_RUN_COMMAND', 'ls -la')
ALERTFILE_DIR = os.getenv('ALERTFILE_DIR', '/tmp')

# disable shellpy colorization
shellpyconfig.COLORAMA_ENABLED = False

# configure opsgenie api client
configuration.api_key['Authorization'] = OPSGENIE_API_KEY
configuration.api_key_prefix['Authorization'] = 'GenieKey'


def main():
    with Dir(TARGET_SCRIPT_HOME):
        print "cd'ing into: {}".format(TARGET_SCRIPT_HOME)
        print "running cmd: {}".format(TARGET_RUN_COMMAND)
        try:
            result = `{TARGET_RUN_COMMAND}`
        except NonZeroReturnCodeError as e:
            handle_failure(e)
            sys.exit(1)

        print "return code:", result.returncode
        alertfile = get_alertfile_name()
        if os.path.isfile(alertfile):
            print "stale alertfile {} found, deleting it...".format(alertfile)
            os.remove(alertfile)


def get_alertfile_name():
    hash_object = hashlib.md5(ALERT_SOURCE.encode())
    return os.path.join(ALERTFILE_DIR, "{}.alert".format(hash_object.hexdigest()))


def handle_failure(result_error):
    print result_error

    alertfile = get_alertfile_name()
    if os.path.isfile(alertfile):
        # alertfile already exists, no action is required
        print "alertfile {} already exists".format(alertfile)
    else:
        # alertfile not found, create a new alert in opsgenie
        print "creating opsgenie alert..."
        alert = create_opsgenie_alert(result_error)

        print "writing alertfile {}...".format(alertfile)
        with open(alertfile, 'w') as af:
            json.dump(alert, af)


def get_request_status(request_id):
    try:
        response = AlertApi().get_request_status(request_id=request_id)
        print('data.alert_id: {}'.format(response.data.alert_id))
        print('data.is_success: {}'.format(response.data.is_success))
    except ApiException as err:
        if err.status == 404:
            return False
        print('Exception when calling AlertApi->get_request_status: {}\n'.format(err))
        sys.exit(1)


def create_opsgenie_alert(result_error):
    teams = map(lambda t: TeamRecipient(name=t), ALERT_TEAMS)

    body = CreateAlertRequest(
        message=ALERT_MESSAGE,
        description="{}\n{}".format(ALERT_DESCRIPTION, result_error),
        source=ALERT_SOURCE,
        teams=teams)

    # create request for a new alert
    request_id = ''
    try:
        response = AlertApi().create_alert(body=body)
        request_id = response.request_id
        print('request id: {}'.format(response.request_id))
        print('took: {}'.format(response.took))
        print('result: {}'.format(response.result))
    except ApiException as err:
        print('Exception when calling AlertApi->create_alert: {}\n'.format(err))
        sys.exit(1)

    # query request status until an alert is created
    alert_id = ''
    while alert_id == '':
        try:
            response = AlertApi().get_request_status(request_id=request_id)
            alert_id = response.data.alert_id
        except ApiException as err:
            if err.status == 404:
                continue
            print('Exception when calling AlertApi->get_request_status: {}\n'.format(err))
            sys.exit(1)

    # get alert details
    try:
        response = AlertApi().get_alert(identifier=alert_id, identifier_type='id')
    except ApiException as err:
        print('Exception when calling AlertApi->get_alert: {}\n'.format(err))
        sys.exit(1)

    return {
        'alert_id': response.data.id,
        'message': response.data.message,
        'status': response.data.status,
        'created_at': response.data.created_at.strftime('%Y-%m-%d %H:%M:%S %z'),
        'source': response.data.source,
        'description': response.data.description
    }


if __name__ == "__main__":
    main()
